// This example mostly invented to play with the built-in API

console.log(Object());
console.log(new Object());
console.log(typeof(String));
console.log(typeof(String()));
console.log(typeof(new String()));
console.log(typeof(String));
console.log(typeof(String("foo")));
console.log(typeof(new String("foo")));
console.log(String);
console.log(String("foo"));
console.log(new String("foo"));
var foo_str_instance = new String("foo");
console.log(foo_str_instance.toString());

my = String;

console.log.X = "X";
console.log(console.log.X); // does work?

console.log(my);

console.log(true);
console.log(false);
console.log(Boolean());
console.log(Boolean(true));
console.log(Boolean(false));
console.log(new Boolean);
console.log(new Boolean(true));
console.log(new Boolean(false));
console.log(typeof(true));
console.log(typeof(false));
console.log(typeof(Boolean));
console.log(typeof(Boolean(true)));
console.log(typeof(Boolean(false)));
console.log(typeof(new Boolean()));
console.log(typeof(new Boolean(true)));
console.log(typeof(new Boolean(false)));

false_boolean = new Boolean();
console.log(false_boolean.toString());
console.log(typeof(false_boolean.toString));
console.log(typeof(false_boolean.toString()));

a = Object();
a.moo = new Object();
a.foo = "42";
a.bar = null;
a.xyz = a; // we are smart enough to catch circular reference
console.log(
	"a is a type of a object? =>", typeof(a), ";",
	"a.foo is a type of a string? =>", typeof(a.foo), ";",
	"properties are displayed correctly? =>", a, ";",
	"42 is displayed? =>", a.foo.toString(), ";",
	"Object is a type of a function? =>", typeof(Object), "."
);