// This example mostly invented to play with the built-in API

console.log('{} is', Object());
console.log('{} is', new Object());
console.log('function is', typeof(String));
console.log('string is', typeof(String()));
console.log('object is', typeof(new String()));
console.log('function is', typeof(String));
console.log('string is', typeof(String("foo")));
console.log('object is', typeof(new String("foo")));
console.log('[Function: String] is', String);
console.log('foo is', String("foo"));
console.log('[String: foo] is', new String("foo"));

var foo_str_instance = new String("foo");

console.log('foo is', foo_str_instance.toString());

var ab = /* test lexer 'block comments' support */ undefined;
console.log('undefined is', ab);
console.log('undefined is', typeof(ab));

const Foo = function () {
	this.attribute = "42";
	return "something but not an object";
};

var hy = new Foo();

console.log('This one is also a valid string literal, bro!');

console.log('[Function: Foo] is', Foo);
console.log('function is', typeof(Foo));
console.log('Foo: { attribute: 42 } is', hy);
console.log('object is', typeof(hy));
console.log('42 is', hy.attribute);
console.log('something but not an object is', Foo());
console.log('string is', typeof(Foo()));
console.log('string is', typeof(hy.attribute));

var my = String;

console.log('[Function: String] is', my);

console.log('true is', true);
console.log('false is', false);
console.log('false is', Boolean());
console.log('true is', Boolean(true));
console.log('false is', Boolean(false));
console.log('[Boolean: false] is', new Boolean);
console.log('[Boolean: true] is', new Boolean(true));
console.log('[Boolean: false] is', new Boolean(false));
console.log('boolean is', typeof(true));
console.log('boolean is', typeof(false));
console.log('function is', typeof(Boolean));
console.log('boolean is', typeof(Boolean(true)));
console.log('boolean is', typeof(Boolean(false)));
console.log('object is', typeof(new Boolean()));
console.log('object is', typeof(new Boolean(true)));
console.log('object is', typeof(new Boolean(false)));

var false_boolean = new Boolean();
console.log('false is', false_boolean.toString());
console.log('function is', typeof(false_boolean.toString));
console.log('string is', typeof(false_boolean.toString()));

var a = Object();
a.moo = new Object();
a.foo = "42";
a.bar = null;
a.xyz = a; // we are smart enough to catch circular reference
console.log("object is", typeof(a));
console.log("string is", typeof(a.foo));
console.log("{...}", a);
console.log("42 is", a.foo.toString());
console.log("function is", typeof(Object));
// leave empty line at the end of this file to satisfy linter
